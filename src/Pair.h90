!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!                                                                                   !!
!!  This file is part of SciFT project                                               !!
!!  Copyright (c) 2013-2014 Nestor F. Aguirre (nfaguirrec@gmail.com)                 !!
!!                                                                                   !!
!!  Redistribution and use in source and binary forms, with or without               !!
!!  modification, are permitted provided that the following conditions are met:      !!
!!                                                                                   !!
!!  1. Redistributions of source code must retain the above copyright notice, this   !!
!!     list of conditions and the following disclaimer.                              !!
!!  2. Redistributions in binary form must reproduce the above copyright notice,     !!
!!     this list of conditions and the following disclaimer in the documentation     !!
!!     and/or other materials provided with the distribution.                        !!
!!  3. Neither the name of the copyright holders nor the names of its contributors   !!
!!     may be used to endorse or promote products derived from this software         !!
!!     without specific prior written permission.                                    !!
!!                                                                                   !!
!!  The copyright holders provide no reassurances that the source code provided      !!
!!  does not infringe any patent, copyright, or any other intellectual property      !!
!!  rights of third parties.  The copyright holders disclaim any liability to any    !!
!!  recipient for claims brought against recipient by any third party for            !!
!!  infringement of that parties intellectual property rights.                       !!
!!                                                                                   !!
!!  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  !!
!!  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    !!
!!  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           !!
!!  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR  !!
!!  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   !!
!!  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;     !!
!!  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND      !!
!!  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       !!
!!  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS    !!
!!  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                     !!
!!                                                                                   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef PAIR_H90
#define PAIR_H90 1
	
	type, public :: Pair
		__TYPE_ITEMFIRST__ :: first
		__TYPE_ITEMSECOND__ :: second
		
		__ADD_ATTRIBUTES__
		
		contains
			generic :: init => initDefault
			generic :: assignment(=) => copyPair
			generic :: operator(==) => equal
			generic :: operator(/=) => nequal
			
			procedure :: initDefault
			procedure :: copyPair
			final :: destroyPair
			procedure :: equal
			procedure :: nequal
#ifndef PairBasicInterface
			procedure :: str
			procedure :: show
#endif
			
			__ADD_METHODS__
	end type Pair
	
	contains
	
	!>
	!! @brief Constructor
	!!
	subroutine initDefault( this, first, second )
		class(Pair) :: this
		__TYPE_ITEMFIRST__ :: first
		__TYPE_ITEMSECOND__ :: second
		
		this.first = first
		this.second = second
	end subroutine initDefault
	
	!>
	!! @brief Copy constructor
	!!
	subroutine copyPair( this, other )
		class(Pair), intent(out) :: this
		type(Pair), intent(in) :: other
		
		this.first = other.first
		this.second = other.second
	end subroutine copyPair
	
	!>
	!! @brief
	!!
	function equal( this, other ) result( output )
		class(Pair), intent(in) :: this
		class(Pair), intent(in) :: other
		logical :: output
		
		output = .false.
		if( this.first == other.first .and. this.second == other.second ) then
			output = .true.
		end if
	end function equal
	
	!>
	!! @brief 
	!!
	function nequal( this, other ) result( output )
		class(Pair), intent(in) :: this
		class(Pair), intent(in) :: other
		logical :: output
		
		output = .not. ( this == other )
	end function nequal
	
	!>
	!! @brief Destructor
	!!
	subroutine destroyPair( this )
		type(Pair), intent(inout) :: this
		
	end subroutine destroyPair
	
#ifndef PairBasicInterface
	!>
	!! @brief Show 
	!!
	subroutine show( this, unit, formatted )
		class(Pair) :: this
		integer, optional, intent(in) :: unit
		logical, optional :: formatted
		
		integer :: effunit
		logical :: effFormatted
		
		effFormatted = .false.
		if( present(formatted) ) effFormatted = formatted
		
		effunit = 6
		if( present(unit) ) effunit = unit
		
		write(effunit,"(a)") trim(str(this,effFormatted))
	end subroutine show
#endif

#endif
