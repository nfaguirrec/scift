!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!                                                                                   !!
!!  This file is part of SciFT project                                               !!
!!  Copyright (c) 2013-2015 Nestor F. Aguirre (nfaguirrec@gmail.com)                 !!
!!                                                                                   !!
!!  Redistribution and use in source and binary forms, with or without               !!
!!  modification, are permitted provided that the following conditions are met:      !!
!!                                                                                   !!
!!  1. Redistributions of source code must retain the above copyright notice, this   !!
!!     list of conditions and the following disclaimer.                              !!
!!  2. Redistributions in binary form must reproduce the above copyright notice,     !!
!!     this list of conditions and the following disclaimer in the documentation     !!
!!     and/or other materials provided with the distribution.                        !!
!!  3. Neither the name of the copyright holders nor the names of its contributors   !!
!!     may be used to endorse or promote products derived from this software         !!
!!     without specific prior written permission.                                    !!
!!                                                                                   !!
!!  The copyright holders provide no reassurances that the source code provided      !!
!!  does not infringe any patent, copyright, or any other intellectual property      !!
!!  rights of third parties.  The copyright holders disclaim any liability to any    !!
!!  recipient for claims brought against recipient by any third party for            !!
!!  infringement of that parties intellectual property rights.                       !!
!!                                                                                   !!
!!  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  !!
!!  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    !!
!!  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           !!
!!  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR  !!
!!  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   !!
!!  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;     !!
!!  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND      !!
!!  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       !!
!!  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS    !!
!!  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                     !!
!!                                                                                   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef MAP_H90
#define MAP_H90 1

! #undef __CLASS_ITEMLIST__
! #undef __TYPE_MAPLIST__
! #undef __CLASS_MAPVALUE__
! #undef __TYPE_MAPPAIR__

	type, public :: Map
		__TYPE_MAPLIST__ :: list
		__CLASS_MAPITERATOR__, pointer :: begin => null()
		__CLASS_MAPITERATOR__, pointer :: end => null()
		
		contains
			generic :: assignment(=) => copyList
			
			procedure :: copyList
			final :: destroyMap
#ifndef MapBasicInterface
			procedure :: str
			procedure :: show
			procedure :: save
			procedure :: toFStream
#endif
			procedure :: size
			procedure :: isEmpty
			procedure, private :: privateFind
			procedure :: find
			procedure :: contains
			procedure :: insert
			generic :: set => setFromPtr, insert
			procedure :: setFromPtr
			generic :: erase => eraseFromPtr, eraseFromKey
			procedure :: eraseFromPtr
			procedure :: eraseFromKey
			procedure :: clear
			generic :: at => atFromPtr, atFromKey, atFromPos
			procedure :: atFromPtr
			procedure :: atFromKey
			procedure :: atFromPos
			generic :: key => keyFromPtr, keyFromPos
			procedure :: keyFromPtr
			procedure :: keyFromPos
			generic :: pair => pairFromPtr, pairFromKey, pairFromPos
			procedure :: pairFromPtr
			procedure :: pairFromKey
			procedure :: pairFromPos
			
			__ADD_METHODS__
	end type Map

	interface Map
		module procedure initDefault
	end interface
	
	contains
	
	!>
	!! @brief Constructor
	!!
	function initDefault() result( this )
		type(Map) :: this

		this.list = __MAPLIST__()
	end function initDefault
	
	!>
	!! @brief Copy constructor
	!!
	subroutine copyList( this, other )
		class(Map), intent(out) :: this
		type(Map), intent(in) :: other
		
		this.list = other.list
		this.begin => this.list.begin
		this.end => this.list.end
	end subroutine copyList
	
	!>
	!! @brief Destructor
	!!
	subroutine destroyMap( this )
		type(Map), intent(inout) :: this
		
		call this.clear()
	end subroutine destroyMap
	
#ifndef MapBasicInterface
	!>
	!! @brief Show 
	!!
	subroutine show( this, unit, formatted )
		class(Map) :: this
		integer, optional, intent(in) :: unit
		logical, optional :: formatted
		
		integer :: effunit
		logical :: effFormatted
		
		effFormatted = .false.
		if( present(formatted) ) effFormatted = formatted
		
		effunit = 6
		if( present(unit) ) effunit = unit
		
		write(effunit,"(a)") trim(str(this,effFormatted))
	end subroutine show
	
	!>
	!! Save the data in two column format in a
	!! selected unit
	!!
	subroutine save( this, ofileName )
		class(Map), intent(in) :: this
		character(*), optional, intent(in) :: ofileName
		
		type(OFStream) :: ofile
		
		if( present(ofileName) ) then
			call ofile.init( ofileName )
			call this.toFStream( ofile )
			call ofile.close()
		else
			call this.toFStream()
		end if
	end subroutine save
#endif
	
	!>
	!! @brief
	!!
	function size( this ) result( output )
		class(Map), intent(in) :: this
		integer :: output
		
		output = this.list.size()
	end function size
	
	!>
	!! @brief
	!!
	function isEmpty( this ) result( output )
		class(Map), intent(in) :: this
		logical :: output
		
		output = ( this.list.size() == 0 )
	end function isEmpty
	
	!>
	!! @brief
	!!
	function privateFind( this, key, ptr ) result( output )
		class(Map), intent(in) :: this
		type(String), intent(in) :: key
		__CLASS_MAPITERATOR__, intent(inout), pointer :: ptr
		integer :: output
		
		__TYPE_MAPPAIR__ :: pair, pairPrev
		__CLASS_MAPITERATOR__, pointer :: iter
		
		iter => this.list.begin
		pair = iter.data
		
		! Si solo hay un elemento en la lista
		if( this.list.size() == 1 ) then
			if( pair.first == key ) then
				output = 0
			else if( pair.first < key ) then
				output = 1
			else if( key < pair.first ) then
				output = -1
			end if

			ptr => iter
			return
		end if
		
		! Si el elemento esta antes de la cabeza
		if( key < pair.first ) then
			output = -1
			ptr => iter
			return
		end if
		
		do while( associated(iter) )
			pair = iter.data
! 			write(*,*) "Buscando => ", pair.first.fstr, pair.second, key.fstr
			if( key < pair.first ) then
				
				pairPrev = iter.prev.data
				
				if( pairPrev.first == key ) then
					output = 0
				else
					output = 1
				end if
				
				ptr => iter.prev
				
				return
			end if
			
			iter => iter.next
		end do
		
		iter => this.list.end
		pair = iter.data
		
		ptr => this.list.end
		if( key == pair.first ) then
			output = 0
		else if( pair.first < key ) then
			output = 1
		end if
	end function privateFind
	
	!>
	!! @brief
	!!
	function find( this, key, ptr ) result( output )
		class(Map), intent(in) :: this
		type(String), intent(in) :: key
		__CLASS_MAPITERATOR__, intent(inout), pointer :: ptr
		logical :: output
		
		integer :: loc
		
		if( this.size() == 0 ) then
			output = .false.
			ptr => null()
			return
		end if
		
		loc = this.privateFind( key, ptr )
		if( abs(loc) == 1 ) then
			output = .false.
			ptr => null()
		else
			output = .true.
		end if
	end function find
	
	!>
	!! @brief Returns true if the map contains an item with key key; otherwise returns false.
	!!
	function contains( this, key ) result( output )
		class(Map), intent(in) :: this
		type(String), intent(in) :: key
		logical :: output
		
		__CLASS_MAPITERATOR__, pointer :: ptr
		integer :: loc
		
		output = this.find( key, ptr )
		
		ptr => null()
	end function contains
	
	!>
	!! @brief
	!!
	subroutine insert( this, key, value )
		class(Map), intent(inout) :: this 
		type(String), intent(in) :: key
		__CLASS_MAPVALUE__, intent(in) :: value
		
		__CLASS_MAPITERATOR__, pointer :: ptr
		__TYPE_MAPPAIR__ :: pair
		
		call pair.init( key, value )
		
		if( this.list.isEmpty() ) then
			call this.list.append( pair )
			
			this.begin => this.list.begin
			this.end => this.list.end

			return
		end if
		
		select case( this.privateFind( key, ptr ) )
			case(-1)
				call this.list.prepend( pair )
			case(0)
				call this.list.replace( ptr, pair )
			case(1)
				call this.list.insert( ptr, pair )
		end select
		
		this.begin => this.list.begin
		this.end => this.list.end
	end subroutine insert
	
	!>
	!! @brief
	!!
	subroutine setFromPtr( this, ptr, value )
		class(Map) :: this
		__CLASS_MAPITERATOR__, intent(inout), pointer :: ptr
		__CLASS_MAPVALUE__, intent(in) :: value
		
		__TYPE_MAPPAIR__ :: pair
		
		call pair.init( ptr.data.first, value )
		
		call this.list.replace( ptr, pair )
	end subroutine setFromPtr
	
	!>
	!! @brief
	!!
	subroutine eraseFromPtr( this, ptr )
		class(Map) :: this
		__CLASS_MAPITERATOR__, intent(in), pointer :: ptr
		
		call this.list.erase( ptr )
		
		this.begin => this.list.begin
		this.end => this.list.end
	end subroutine eraseFromPtr
	
	!>
	!! @brief
	!!
	subroutine eraseFromKey( this, key )
		class(Map) :: this
		class(String), intent(in) :: key
		
		__CLASS_MAPITERATOR__, pointer :: ptr
		
		if( this.find( key, ptr ) ) then
			call this.list.erase( ptr )
			
			this.begin => this.list.begin
			this.end => this.list.end
		end if
	end subroutine eraseFromKey
	
	!>
	!! @brief
	!!
	subroutine clear( this )
		class(Map), intent(inout) :: this
		
		call this.list.clear()
		this.begin => this.list.begin
		this.end => this.list.end
	end subroutine clear
	
	!>
	!! @brief
	!!
	function atFromPtr( this, ptr ) result( output )
		class(Map), intent(in) :: this
		__CLASS_MAPITERATOR__, intent(in), pointer :: ptr
		__TYPE_MAPVALUE__ :: output
		
		output = ptr.data.second
	end function atFromPtr
	
	!>
	!! @brief
	!!
	function atFromKey( this, key, defaultValue ) result( output )
		class(Map) :: this
		type(String), intent(in) :: key
		__CLASS_MAPVALUE__, optional, intent(in) :: defaultValue
		__TYPE_MAPVALUE__ :: output
		
		__CLASS_MAPITERATOR__, pointer :: ptr
		
		if( this.find( key, ptr ) ) then
			output = ptr.data.second
		else if( present(defaultValue) ) then
			call this.insert( key, defaultValue )
			output = defaultValue
		else
			write(6,"(A)") "### Error ### Map.atFromKey: There isn't value associated to key "//trim(key.fstr)
			write(6,"(A)") "                                You can use the defaultValue option"
			stop
		end if
	end function atFromKey
	
	!>
	!! @brief
	!!
	function atFromPos( this, pos ) result( output )
		class(Map), intent(in) :: this
		integer, intent(in) :: pos
		__TYPE_MAPVALUE__ :: output
		
		__TYPE_MAPPAIR__ :: pair
		
		pair = this.list.at( pos )
		
		output = pair.second
	end function atFromPos
	
	!>
	!! @brief
	!!
	function keyFromPtr( this, ptr ) result( output )
		class(Map), intent(in) :: this
		__CLASS_MAPITERATOR__, intent(in), pointer :: ptr
		type(String) :: output
		
		output = ptr.data.first
	end function keyFromPtr

	!>
	!! @brief
	!!
	function keyFromPos( this, pos ) result( output )
		class(Map), intent(in) :: this
		integer, intent(in) :: pos
		type(String) :: output
		
		__TYPE_MAPPAIR__ :: pair
		
		pair = this.list.at( pos )
		
		output = pair.first
	end function keyFromPos
	
	!>
	!! @brief
	!!
	function pairFromPtr( this, ptr ) result( output )
		class(Map), intent(in) :: this
		__CLASS_MAPITERATOR__, intent(in), pointer :: ptr
		__TYPE_MAPPAIR__ :: output
		
		output = ptr.data
	end function pairFromPtr
	
	!>
	!! @brief
	!!
	function pairFromKey( this, key ) result( output )
		class(Map), intent(in) :: this
		type(String), intent(in) :: key
		__TYPE_MAPPAIR__ :: output
		
		__CLASS_MAPITERATOR__, pointer :: ptr
		
		if( this.find( key, ptr ) ) then
			output = ptr.data
		end if
	end function pairFromKey
	
	!>
	!! @brief
	!!
	function pairFromPos( this, pos ) result( output )
		class(Map), intent(in) :: this
		integer, intent(in) :: pos
		__TYPE_MAPPAIR__ :: output
		
		output = this.list.at( pos )
	end function pairFromPos
#endif
