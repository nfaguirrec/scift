!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!                                                                                   !!
!!  This file is part of SciFT project                                               !!
!!  Copyright (c) 2012-2013 Nestor F. Aguirre (nfaguirrec@gmail.com)                 !!
!!                                                                                   !!
!!  Redistribution and use in source and binary forms, with or without               !!
!!  modification, are permitted provided that the following conditions are met:      !!
!!                                                                                   !!
!!  1. Redistributions of source code must retain the above copyright notice, this   !!
!!     list of conditions and the following disclaimer.                              !!
!!  2. Redistributions in binary form must reproduce the above copyright notice,     !!
!!     this list of conditions and the following disclaimer in the documentation     !!
!!     and/or other materials provided with the distribution.                        !!
!!  3. Neither the name of the copyright holders nor the names of its contributors   !!
!!     may be used to endorse or promote products derived from this software         !!
!!     without specific prior written permission.                                    !!
!!                                                                                   !!
!!  The copyright holders provide no reassurances that the source code provided      !!
!!  does not infringe any patent, copyright, or any other intellectual property      !!
!!  rights of third parties.  The copyright holders disclaim any liability to any    !!
!!  recipient for claims brought against recipient by any third party for            !!
!!  infringement of that parties intellectual property rights.                       !!
!!                                                                                   !!
!!  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  !!
!!  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    !!
!!  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           !!
!!  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR  !!
!!  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   !!
!!  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;     !!
!!  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND      !!
!!  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       !!
!!  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS    !!
!!  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                     !!
!!                                                                                   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef LIST_H90
#define LIST_H90 1
	
	!>
	!! The ListIterator class provides an STL-style iterator for List. ListIterator
	!! allows you to iterate over a List and to modify the list item associated
	!! with the iterator. List features both STL-style iterators and Java-style iterators.
	!! For developers who already know STL, have the advantage of familiarity.
	!!
	!! You must initialize it using a function like List.begin before you can start iterating.
	!! Here's a typical loop that prints all the items stored in a list:
	!!
	!! @code{.f90}
	!!    type(IntegerList) :: mylist
	!!    type(IntegerListIterator), pointer :: iter
	!!         
	!!    call mylist%init()
	!!    
	!!    call mylist%append( 8 )
	!!    call mylist%append( 5 )
	!!    call mylist%append( 1 )
	!!    
	!!    iter => mylist%begin
	!!    do while ( associated(iter) )
	!!            write(*,*) iter%data
	!!            
	!!            iter => iter%next
	!!    end do
	!! @endcode{.f90}
	!!
	type, public :: ListIterator
		class(ListIterator), public, pointer :: prev => null()
		class(ListIterator), public, pointer :: next => null()
		__TYPE_ITEMLIST__ , public :: data
	end type ListIterator
	
	!>
	!! The List class is a template class that provides linked lists.
	!! It stores a list of values and provides iterator-based access
	!! as well as insertions and removals. List features both STL-style
	!! iterators and Java-style iterators. For developers who already
	!! know STL, have the advantage of familiarity.
	!!
	!! Here's an example of a List that stores integers ...
	!!
	!! @code{.c}
	!! #define List IntegerList
	!! #define ListIterator IntegerListIterator
	!! #define __CLASS_ITEMLIST__ integer
	!! #define __TYPE_ITEMLIST__ integer
	!! 
	!! #include "List.h90"
	!! 
	!! #undef List
	!! #undef ListIterator
	!! #undef __CLASS_ITEMLIST__
	!! #undef __TYPE_ITEMLIST__
	!! @endcode{.c}
	!!
	!! ... and a List that stores Atom values:
	!!
	!! @code{.c}
	!! #define List AtomList
	!! #define ListIterator AtomListIterator
	!! #define __CLASS_ITEMLIST__ class(Atom)
	!! #define __TYPE_ITEMLIST__ type(Atom)
	!! 
	!! #include "List.h90"
	!! 
	!! #undef List
	!! #undef ListIterator
	!! #undef __CLASS_ITEMLIST__
	!! #undef __TYPE_ITEMLIST__
	!! @endcode{.c}
	!!
	!! Finally, you can use the first one thus:
	!!
	!! @code{.f90}
	!!    type(IntegerList) :: mylist
	!!    type(IntegerListIterator), pointer :: iter
	!!         
	!!    call mylist%init()
	!!    
	!!    call mylist%append( 8 )
	!!    call mylist%append( 5 )
	!!    call mylist%append( 1 )
	!!    
	!!    iter => mylist%begin
	!!    do while ( associated(iter) )
	!!            write(*,*) iter%data
	!!            
	!!            iter => iter%next
	!!    end do
	!! @endcode{.f90}
	!!
	type, public :: List
		integer :: nItems = 0
		class(ListIterator), pointer :: begin => null()
		class(ListIterator), pointer :: end => null()
		
		contains
			generic :: init => initList
			generic :: assignment(=) => copyList  !@todo ifort version >= 2.015. Does not allow to overwrite this method
			generic :: operator(==) => equal
			generic :: operator(/=) => nequal
			
			procedure :: initList
			procedure :: copyList
			final :: destroyList
			procedure :: equal
			procedure :: nequal
#ifndef ListBasicInterface
			procedure :: str
			procedure :: show
			procedure :: save
			procedure :: toFStream
#endif
			generic :: size => ssize
			procedure, private :: ssize
			procedure :: isEmpty
			generic :: append => appendValue, appendFArray
			procedure, private :: appendValue
			procedure, private :: appendFArray
			procedure :: prepend
			procedure :: insert
			generic :: erase => eraseFromPtr, eraseFromPos
			procedure :: eraseFromPtr
			procedure :: eraseFromPos
			procedure :: eraseAllExcept
			procedure :: eraseAllExceptFirst
			procedure :: eraseAllExceptLast
			procedure :: clear
			generic :: at => atFromPtr, atFromPos
			procedure, private :: atFromPtr
			procedure, private :: atFromPos
			generic :: replace => replaceFromPtr, replaceFromPos
			procedure, private :: replaceFromPtr
			procedure, private :: replaceFromPos
			procedure :: pointerOf
			procedure :: lastPointerOf
			procedure :: contains
			procedure :: ptr
			procedure :: fArray
			
			! @todo Hay que implementar la interfaz publica de http://doc.qt.digia.com/qt/qlist.html#size_type-typedef
	end type List
	
	!>
	!! Encapsulated ListIterator 
	!!
	type, private :: EListIterator
		class(ListIterator), pointer :: p
	end type EListIterator
	
	contains
	
	!>
	!! @brief Constructor
	!!
	!! Constructs an empty list
	!!
	subroutine initList( this, initialSize, value )
		class(List) :: this
		integer, optional, intent(in) :: initialSize
		__CLASS_ITEMLIST__, optional, intent(in) :: value
		
		integer :: i
		
		if( this%size() > 0 ) then
			call this%clear()
		end if
		
		if( present(initialSize) .and. present(value) ) then
			do i=1,initialSize
				call this%append( value )
			end do
		end if
	end subroutine initList
	
	!>
	!! @brief Copy constructor
	!!
	!! Constructs a copy of other
	!! @see operator(=)
	!!
	subroutine copyList( this, other )
		class(List), intent(out) :: this
		class(List), intent(in) :: other
		
		class(ListIterator), pointer :: iter
		
		call this%clear()
		
		iter => other%begin
		do while( associated(iter) )
			call this%append( iter%data )
			iter => iter%next
		end do
	end subroutine copyList
	
	!>
	!! @brief Destructor
	!!
	!! Destroys the list. References to the values in the
	!! list, and all iterators over this list, become invalid.
	!!
	subroutine destroyList( this )
		type(List), intent(inout) :: this
		
		call this%clear()
	end subroutine destroyList

	!>
	!! @brief
	!!
	function equal( this, other ) result( output )
		class(List), intent(in) :: this
		class(List), intent(in) :: other
		logical :: output
		
		type(ListIterator), pointer :: iter1, iter2
		
		output = .false.
		
		iter1 => this%begin
		iter2 => other%begin
		do while ( associated(iter1) .and. associated(iter2) )
			iter1 => iter1%next
			iter2 => iter2%next
			
			if( .not. ( iter1%data == iter2%data ) ) then
				output = .false.
				return
			end if
		end do
		
		output = .true.
	end function equal
	
	!>
	!! @brief 
	!!
	function nequal( this, other ) result( output )
		class(List), intent(in) :: this
		class(List), intent(in) :: other
		logical :: output
		
		output = .not. ( this == other )
	end function nequal
	
#ifndef ListBasicInterface
	!>
	!! @brief Show 
	!!
	!! Writes the list to out unit. It's Neccesarry that the method str
	!! is implemented in the child class
	!!
	subroutine show( this, unit, formatted )
		class(List) :: this
		integer, optional, intent(in) :: unit
		logical, optional :: formatted
		
		integer :: effunit
		logical :: effFormatted
		
		effFormatted = .false.
		if( present(formatted) ) effFormatted = formatted
		
		effunit = 6
		if( present(unit) ) effunit = unit
		
		write(effunit,"(a)") trim(str(this,effFormatted))
	end subroutine show
	
	!>
	!! Save the data in two column format in a
	!! selected unit
	!!
	subroutine save( this, ofileName )
		use IOStream_
		class(List), intent(in) :: this
		character(*), optional, intent(in) :: ofileName
		
		type(OFStream) :: ofile
		
		if( present(ofileName) ) then
			call ofile%init( ofileName )
			call this%toFStream( ofile )
			call ofile%close()
		else
			call toFStream( this )
		end if
	end subroutine save
#endif
	
	!>
	!! @brief Returns the number of items in the list
	!!
	function ssize( this ) result( output )
		class(List), intent(in) :: this
		integer :: output
		
		output = this%nItems
	end function ssize
	
	!>
	!! @brief Returns true if the list contains no items, otherwise returns false
	!!
	function isEmpty( this ) result( output )
		class(List), intent(in) :: this
		logical :: output
		
		output = ( this%nItems == 0 )
	end function isEmpty
	
	!>
	!! @brief Inserts a value at the end of the list
	!!
	subroutine appendValue( this, item )
		class(List), intent(inout) :: this
		__CLASS_ITEMLIST__, intent(in) :: item
		
		if ( this%nItems == 0 ) then
			allocate(this%begin)
			
			! copy
			this%begin%data = item
			
			this%end => this%begin
		else
			allocate(this%end%next)
			this%end%next%prev => this%end
			
			! copy
			this%end%next%data = item
			
			this%end => this%end%next
		end if
		
		this%nItems = this%nItems+1
	end subroutine appendValue
	
	!>
	!! @brief Inserts values at the end of the list
	!!
	subroutine appendFArray( this, array )
		class(List) :: this
		__CLASS_ITEMLIST__, intent(in) :: array(:)
		
		integer :: i
		
		do i=1,size(array)
			call this%append( array(i) )
		end do
	end subroutine appendFArray
	
	!>
	!! @brief Inserts value at the beginning of the list
	!!
	subroutine prepend( this, item )
		class(List), intent(inout) :: this
		__CLASS_ITEMLIST__, intent(in) :: item
		
		if ( this%nItems == 0 ) then
			call this%append( item )
		else
			allocate(this%begin%prev)
			this%begin%prev%next => this%begin
			
			! copy
			this%begin%prev%data = item
			
			this%begin => this%begin%prev
		end if
		
		this%nItems = this%nItems+1
	end subroutine prepend
	
	!>
	!! @brief Inserts value in front of the item pointed to by the iterator before.
	!!
	subroutine insert( this, before, item )
		class(List), intent(inout) :: this 
		class(ListIterator), intent(in), pointer :: before
		__CLASS_ITEMLIST__, intent(in) :: item
		
		class(ListIterator), pointer :: cBefore
		class(ListIterator), pointer :: after
		cBefore => before
		
! 		class(ListIterator), pointer :: elem
! 		
! 		allocate(elem)
! 		
! 		! copy
! 		elem%data = item
! 		
! 		elem%prev => before
! 		
! 		if ( associated(before%next) ) then
! 			elem%next => before%next
! 			before%next%prev => elem
! 			before%next => elem
! 		else
! 			before%next => elem
! 			this%end => elem
! 		end if
! 		
! 		this%nItems = this%nItems+1 

		
		if ( associated(cBefore%next) ) then
			after => cBefore%next
			
			cBefore%next => null()
			allocate(cBefore%next)
			
			! copy
			cBefore%next%data = item
			
			cBefore%next%next => after
			cBefore%next%prev => cBefore
			after%prev => cBefore%next
			
			this%nItems = this%nItems+1 
		else
			call this%append( item )
		end if
		
	end subroutine insert
	
	!>
	!! @brief Removes the item pointed to by the iterator ptr from the list
	!!
	subroutine eraseFromPtr( this, ptr )
		class(List), intent(inout) :: this
		class(ListIterator), pointer, intent(in) :: ptr
		
		class(ListIterator), pointer :: cPtr
		cPtr => ptr
		
		if( associated(cPtr%prev) .and. associated(cPtr%next) ) then ! < El elemento enta en medio de otros dos
			cPtr%prev%next => cPtr%next
			cPtr%next%prev => cPtr%prev
			cPtr%prev => null()
			cPtr%next => null()
		else if( ( .not. associated(cPtr%prev) ) .and. associated(cPtr%next) ) then ! < El elemento es la cabeza
			this%begin => cPtr%next
			cPtr%next => null()
			this%begin%prev => null()
		else if( associated(cPtr%prev) .and. ( .not. associated(cPtr%next) ) ) then ! < El elemento es la cola
			this%end => cPtr%prev
			cPtr%prev => null()
			this%end%next => null()
		end if
		
		deallocate(cPtr)
		
		this%nItems = this%nItems-1 
		
		if( this%nItems == 0 ) then
			this%begin => null()
			this%end => null()
		end if
	end subroutine eraseFromPtr
	
	!>
	!! @brief Removes the item in pos-th position in the list,
	!!
	subroutine eraseFromPos( this, pos )
		class(List) :: this
		integer, intent(in) :: pos
		
		integer :: i
		class(ListIterator), pointer :: iter
		
		i=1
		iter => this%begin
		do while ( associated(iter) )
			if( i==pos ) then
				call this%eraseFromPtr( iter )
				return
			end if
			
			iter => iter%next
			i = i+1
		end do
	end subroutine eraseFromPos
	
	!>
	!! @brief Removes all the items in the list except those identified with the position given by posVec vector
	!!
	subroutine eraseAllExcept( this, posVec )
		use String_
		class(List), intent(inout) :: this
		integer, intent(in) :: posVec(:)
		
		integer :: i, j, n
		class(ListIterator), pointer :: iter
		type(EListIterator), allocatable :: iterVec(:)
		integer :: nItems
		
		nItems = size(posVec)
		
		if( any( posVec > this%ssize() ) ) then
			write(*,"(A)") "### ERROR ### List.eraseAllExcept( posVec ): There is one value X than X > size"
			write(*,"(A,I3)")                 "                size = ", this%ssize()
			write(*,"(A,"//trim(FString_fromInteger(size(posVec)))//"I3,A)") "              posVec = (", posVec, ")"
			stop
		end if
		
		allocate( iterVec(this%size()) ) ! En el peor de los casos se borran todos
		
		i = 1
		j = 1
		iter => this%begin
		do while( associated(iter) )
			if( .not. any( i == posVec ) ) then
				iterVec(j)%p => iter
				j = j+1
			end if
			
			i = i+1
			iter => iter%next
		end do
		n = j-1
		
		do i=1,n
			call this%erase( iterVec(i)%p )
		end do
		
		deallocate( iterVec )
	end subroutine eraseAllExcept
	
	!>
	!! @brief Removes all the items in the list except this nItems-th first
	!!
	subroutine eraseAllExceptFirst( this, nItems )
		class(List), intent(inout) :: this
		integer, intent(in) :: nItems
		
		integer :: i
		integer, allocatable :: ids(:)
		
		if( nItems > this%ssize() ) then
			write(*,*) ""
			write(*,"(A,I5,A,I5,A)") "!!! WARNING ¡¡¡ List.eraseAllExceptFirst( nItems ). nItems > size (", nItems, " > ", this%size(), "). List is not affected."
			return
		end if
		
		allocate( ids(nItems) )
		
		do i=1,nItems
			ids(i) = i
		end do
		
		call this%eraseAllExcept( ids )
		
		deallocate( ids )
	end subroutine eraseAllExceptFirst
	
	!>
	!! @brief Removes all the items in the list except this nItems-th last
	!!
	subroutine eraseAllExceptLast( this, nItems )
		class(List), intent(inout) :: this
		integer, intent(in) :: nItems
		
		integer :: i, j
		integer, allocatable :: ids(:)
		
		if( nItems > this%ssize() ) then
			write(*,*) ""
			write(*,"(A,I5,A,I5,A)") "!!! WARNING ¡¡¡ List.eraseAllExceptLast( nItems ). nItems > size (", nItems, " > ", this%size(), "). List is not affected."
			return
		end if
		
		allocate( ids(nItems) )
		
! 		j = 1
! 		do i=this%size()-nItems,this%size()
! 			ids(j) = i
! 			j = j+1
! 		end do
		
		j = this%size()-nItems
		do i=1,nItems
			ids(i) = j+i
		end do
		
		call this%eraseAllExcept( ids )
		
		deallocate( ids )
	end subroutine eraseAllExceptLast
	
	!>
	!! @brief Removes all the items in the list
	!!
	subroutine clear( this )
		class(List), intent(inout) :: this
		
		class(ListIterator), pointer :: iter
		class(ListIterator), pointer :: iterPos
		
		if( .not. ( associated(this%begin) .and. associated(this%end) ) ) return
		
		iter => this%begin
! 		if( associated(iter%next) ) iterPos => iter%next
		
		do while ( associated(iter) )
			call this%erase( iter )
			iter => this%begin
! 			iter => iterPos
			
! 			if( associated(iterPos) ) iterPos => iter%next
		end do
		
! 		this%nItems = 0
! 		this%begin => null()
! 		this%end => null()
	end subroutine clear
	
	!>
	!! @brief Returns the item pointed to by the iterator ptr from the list
	!!
	function atFromPtr( this, ptr ) result( output )
		class(List), intent(in) :: this
		class(ListIterator), intent(in), pointer :: ptr
		__TYPE_ITEMLIST__ :: output
		
		output = ptr%data
	end function atFromPtr
	
	!>
	!! @brief Returns the pos-th item from the list
	!!
	function atFromPos( this, pos ) result( output )
		class(List), intent(in) :: this
		integer, intent(in) :: pos
		__TYPE_ITEMLIST__ :: output
		
		integer :: i
		class(ListIterator), pointer :: iter
		
		i=1
		iter => this%begin
		do while ( associated(iter) )
			if( i==pos ) then
				output = iter%data
				return
			end if
			
			iter => iter%next
			i = i+1
		end do
	end function atFromPos
	
	!>
	!! @brief Replaces by item the item pointed to by the iterator ptr from the list
	!!
	subroutine replaceFromPtr( this, ptr, item )
		class(List), intent(in) :: this
		class(ListIterator), intent(inout), pointer :: ptr
		__TYPE_ITEMLIST__, intent(in) :: item
		
		ptr%data = item
	end subroutine replaceFromPtr
	
	!>
	!! @brief Replaces by item the pos-th item from the list
	!!
	subroutine replaceFromPos( this, pos, item )
		class(List), intent(in) :: this
		integer, intent(in) :: pos
		__TYPE_ITEMLIST__, intent(in) :: item
		
		integer :: i
		class(ListIterator), pointer :: iter
		
		i=1
		iter => this%begin
		do while ( associated(iter) )
			if( i==pos ) then
				iter%data = item
				return
			end if
			
			iter => iter%next
			i = i+1
		end do
	end subroutine replaceFromPos
	
	!>
	!! @brief Returns the index position of the first occurrence of value in the vector, searching
	!!        forward from index position from. Returns -1 if no item matched.
	!!        This function requires the value type to have an implementation of operator ==.
	!!
	function pointerOf( this, value, from ) result( output )
		class(List) :: this
		__TYPE_ITEMLIST__, intent(in) :: value
		class(ListIterator), pointer, optional, intent(in) :: from
		type(ListIterator), pointer :: output
		
		class(ListIterator), pointer :: iter
		
		iter => this%begin
		if( present(from) ) iter => from
		
		do while ( associated(iter) )
			if( iter%data == value ) then
				output = iter
				exit
			end if
			
			iter => iter%next
		end do
	end function pointerOf
	
	!>
	!! @brief Returns the index position of the last occurrence of the value value in the vector,
	!!        searching backward from index position from. If from is -1 (the default), the search
	!!        starts at the last item. Returns -1 if no item matched.
	!!        This function requires the value type to have an implementation of operator ==.
	!!
	function lastPointerOf( this, value, from ) result( output )
		class(List) :: this
		__TYPE_ITEMLIST__, intent(in) :: value
		integer, optional, intent(in) :: from
		integer :: output
		
		stop "### ERROR ### List.lastPointerOf() function is not implemented yet"
		
! 		integer :: effFrom
! 		
! 		integer :: i
! 		
! 		effFrom = this%size()
! 		if( present(from) ) effFrom = from
! 		
! 		output=-1
! 		do i=effFrom,1,-1
! 			if( this%data(i) == value ) then
! 				output = i
! 				exit
! 			end if
! 		end do
	end function lastPointerOf
	
	!>
	!! @brief Returns true if the vector contains an occurrence of value; otherwise returns false.
	!!
	function contains( this, value ) result( output )
		class(List) :: this
		__TYPE_ITEMLIST__, intent(in) :: value
		logical :: output
		
		output = .false.
		if( associated( this%pointerOf(value) ) ) output = .true.
	end function contains
	
	!>
	!! @brief Returns the pointer associated to pos-th element
	!!
	function ptr( this, pos ) result( output )
		class(List), intent(in) :: this
		integer, intent(in) :: pos
		type(ListIterator), pointer :: output
		
		integer :: i
		class(ListIterator), pointer :: iter
		
		i=1
		iter => this%begin
		do while ( associated(iter) )
			if( i==pos ) then
				output = iter
				return
			end if
			
			iter => iter%next
			i = i+1
		end do
	end function ptr
	
	!>
	!! @brief
	!!
	function fArray( this ) result( output )
		class(List), intent(in) :: this
		__TYPE_ITEMLIST__, allocatable :: output(:)
		
		integer :: i
		class(ListIterator), pointer :: iter
		
		if( allocated(output) ) deallocate(output)
		allocate( output(this%size()) )
		
		i=1
		iter => this%begin
		do while ( associated(iter) )
			output(i) = iter%data
			
			iter => iter%next
			i = i+1
		end do
	end function fArray
#endif
